// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package robot.commands;

//import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.CommandBase;
import robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import robot.subsystems.drivetrainSubSys;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class driveByJoystick extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final drivetrainSubSys m_drivetrainSubSys;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private double speed = 0.0;
    private double rotation = 0.0;

    //Joystick driveJoy = RobotContainer.getInstance().getdriverJoystick();
    RobotContainer robot;
    XboxController driver_ctrlr;

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public driveByJoystick(drivetrainSubSys subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_drivetrainSubSys = subsystem;
        addRequirements(m_drivetrainSubSys);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES  

    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        robot = RobotContainer.getInstance();
        driver_ctrlr = robot.getdriverController();

    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        
        boolean slowMode = driver_ctrlr.getXButton();       // Look to see if X Button is held down

        if (driver_ctrlr.getRightTriggerAxis() > 0){
            //were being driven forward
            speed = driver_ctrlr.getRightTriggerAxis();
            if (slowMode)  speed = speed * 0.3;     // Slow down   
        } else if (driver_ctrlr.getLeftTriggerAxis() > 0){
            //were being driven backwards
            speed = -driver_ctrlr.getLeftTriggerAxis();
            if (slowMode)  speed = speed * 0.3;     // Slow down   
        } else{
            speed = 0.0;
        }

        rotation = driver_ctrlr.getLeftX() * 0.3;

        if (slowMode)  rotation = rotation * 0.5;     // Slow down   
        
        m_drivetrainSubSys.curveDrive(speed, rotation, true);

    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_drivetrainSubSys.stop();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}

// This is supposed to be better :D
// I add more stuff
