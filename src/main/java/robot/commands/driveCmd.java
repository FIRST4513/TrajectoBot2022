// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj.Timer;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import robot.subsystems.drivetrainSubSys;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class driveCmd extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final drivetrainSubSys m_drivetrainSubSys;
    private double m_dist;
    private double m_pwr;
    private double m_hdg;
    private String m_mode;
    private double m_timeOut;
    private boolean m_brakeFlag;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    
    Timer commandTmr = new Timer();
    
    int stallCtr = 0;
    final double START_TIME = 0.2;				// Time to wait for motors to start moving robot
	final double STALL_VELOCITY = 3.0;			// Speed less than this will indicate stopped 
    final double STOP_PWR  = - 0.25;			// Power to reverse motors to brake
    double currStop_pwr = STOP_PWR;
    
    double currPwr;
    double tgtYaw;
    double m_RemainTgtDist, m_CurrTgtDist, currDist, currSpeed;
    
    public enum DriveState { START, DRIVING, BRAKING, STALLED, ATEND, DONE };
    private DriveState mDriveState = DriveState.START;	// this keeps track of our current drive mode
    
    public enum DriveDir { FWD, REV };
    private DriveDir mDriveDir = DriveDir.FWD;	// this keeps track of our drive direction
    
    public enum DriveMode { CURRENT_HEADING, NEW_HEADING };
    private DriveMode mDriveMode = DriveMode.CURRENT_HEADING;	// this keeps track of our drive direction

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public driveCmd(double dist, double pwr, double hdg, String mode, double timeOut, boolean brakeFlag, drivetrainSubSys subsystem) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_dist = dist;
        m_pwr = pwr;
        m_hdg = hdg;
        m_mode = mode;
        m_timeOut = timeOut;
        m_brakeFlag = brakeFlag;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_drivetrainSubSys = subsystem;
        addRequirements(m_drivetrainSubSys);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        commandTmr.reset();		// We are just starting out so start timer
    	commandTmr.start();
		m_drivetrainSubSys.resetEncoders();

        // Setup Mode 
        if (m_mode.equals("CURRENT_HEADING")) {
            mDriveMode = DriveMode.CURRENT_HEADING;
            tgtYaw = m_drivetrainSubSys.getGyroYaw();		    // Get current yaw and use that as target
        } else {
            mDriveMode = DriveMode.NEW_HEADING;
            tgtYaw = m_hdg;								// Pass through provided target yaw
        }
        
        if (m_dist < 0) { mDriveDir = DriveDir.REV; }
    	else 			{ mDriveDir = DriveDir.FWD; }
    	
        // Power must be negative if Distance is negative
        if ((mDriveDir == DriveDir.REV) && ( m_pwr > 0 ))      { m_pwr *= -1; }

        if (mDriveDir == DriveDir.FWD) 	{
            currStop_pwr = STOP_PWR;		// Brake Power must be opposite of drive pwr
        } else {
            currStop_pwr = -STOP_PWR;
        }
        mDriveState = DriveState.START;
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        // ---- Get current robot Position and Velocity data ---- 
        currDist = m_drivetrainSubSys.getCurrentDist();
        m_RemainTgtDist = m_dist - currDist;
        currSpeed = m_drivetrainSubSys.getCurrentVel();

        // ----- State 0 (Give robot time to start moving) -----
        if (mDriveState == DriveState.START){
            // we are just starting, we need a delay to avoid false "STALL" detection
            currPwr = m_pwr;
            if(commandTmr.get() > START_TIME) {
                mDriveState = DriveState.DRIVING;    // we should be moving now			
            }
        }

        // ----- Test for COLLITION / BRAKE COMPLETE -----
       if ((mDriveState == DriveState.DRIVING ) || ( mDriveState == DriveState.BRAKING )){
            // ----- Check to see if we have hit something or if braking has brought the robot to a stop -----
            if  (((mDriveDir == DriveDir.FWD) && (currSpeed <= STALL_VELOCITY)) ||
                ((mDriveDir == DriveDir.REV) && (currSpeed >= -STALL_VELOCITY))) {
                // we have stopped moving we may have hit something so stop
                if (stallCtr >= 3) {
                    if (mDriveState == DriveState.DRIVING) {
                        // we have hit something and we are not in brake mode
                        mDriveState = DriveState.STALLED;
                        return;
                    } else {
                        // we are in brake mode and have just come to rest
                        mDriveState = DriveState.ATEND;
                        return;
                    }
                }
                stallCtr++;
            } else {
                // we are moving so reset stall Ctr
                stallCtr = 0;    			
            }
        }

        // ----- Test for AT END (are at Distance to End target)  -----
        if (mDriveState == DriveState.DRIVING){
            // ----- Check to see if we have are done -----
            if (((mDriveDir == DriveDir.FWD) && (m_RemainTgtDist <= 0)) ||
                ((mDriveDir == DriveDir.REV) && (m_RemainTgtDist >= 0))) {
                // We have hit our target distance so we need to end or go into braking Mode
                if (m_brakeFlag) {
                    // we need to brake to a stop
                    mDriveState = DriveState.BRAKING;
                    currPwr = currStop_pwr;
                } else {
                    // we're all done just exit
                    mDriveState = DriveState.ATEND;
                    return;
                }
            }
        }
        
        // we are not done so continue sending pwr to drivetrain
        m_drivetrainSubSys.driveStraightToHdg(currPwr, tgtYaw); 
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_drivetrainSubSys.stop();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
    	if (commandTmr.get() > m_timeOut) {
            // (Were Done) Cmd has timed out
            System.out.println("******** We have timed out *********");
            return true;
        }		
    	if (mDriveState == DriveState.ATEND) {
            // (Were Done) robot has reached its detination
            System.out.println("******** We have reached the end *********");
            return true;
        }
        if (mDriveState == DriveState.STALLED) {
            // (Were Done) We have stalled/Stopped
            System.out.println("******** We have STALLED *********");
            return true;
        }

        return false;   
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
